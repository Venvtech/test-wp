name: Deploy with Docker Compose

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push test-wp_image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          cache-from: type=gha,scope=test-wp_image
          cache-to: type=gha,scope=test-wp_image
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:test-wp_image-${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:test-wp_image-latest

      #- name: Install Docker Compose
      #  run: curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
#
      #- name: Docker context
      #  env:
      #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    AWS_REGION: ${{ secrets.AWS_REGION }}
      #    ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #    GITHUB_SHA: ${{ github.sha }}
      #  run: |
      #    docker context create ecs wordpress --from-env
      #    docker context ls
      #    docker context use wordpress
      #    docker compose --file docker-compose.yaml up

      name: Deploy to Amazon ECS

      on:
        push:
          branches:
            - "main"
      
      env:
        AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
        ECR_REPOSITORY: test-wp_demo          # set this to your Amazon ECR repository name
        ECS_SERVICE: VenvTechECSCluster                # set this to your Amazon ECS service name
        ECS_CLUSTER: VenvTechECSCluster                 # set this to your Amazon ECS cluster name
        ECS_TASK_DEFINITION: .github/workflows/task-definition.json      # set this to the path to your Amazon ECS task definition                                           # file, e.g. .aws/task-definition.json
        CONTAINER_NAME: test-wp_demo           # set this to the name of the container in the
                                                     # containerDefinitions section of your task definition
      
      permissions:
        id-token: write
        contents: read # This is required for actions/checkout@v2
      
      jobs:
        deploy:
          name: Deploy
          runs-on: ubuntu-latest
          #environment: 
      
          steps:
          - name: Checkout
            uses: actions/checkout@v3
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              role-to-assume: ########################### # Update the ARN of the IAM role
              role-session-name: Github
              aws-region: ${{ env.AWS_REGION }}
      
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
      
          - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              IMAGE_TAG: ${{ github.sha }}
            run: |
              # Build a docker container and
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: ${{ env.ECS_TASK_DEFINITION }}
              container-name: ${{ env.CONTAINER_NAME }}
              image: ${{ steps.build-image.outputs.image }}
      
          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ env.ECS_SERVICE }}
              cluster: ${{ env.ECS_CLUSTER }}
              wait-for-service-stability: true